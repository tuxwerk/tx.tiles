Functional Tests
================

This file demonstrates how you go about adding and removing an tiles to different content on a Plone site.

   >>> from plone.testing.z2 import Browser
   >>> import transaction
    
   >>> browser = Browser(self.app)
   >>> browser.handleErrors = False
   >>> from tx.tiles.testing import browserLogin
   >>> browserLogin(self.portal, browser)
   >>> from tx.tiles.settings import PageTilesSettings

Lets make sure that links to add tiles are added across the board on all different content types. Should go to tiles settings after you've added the tiles

Check Page type first,

   >>> browser.open(self.portal.absolute_url())
   >>> browser.getLink(id="document").click()
   >>> browser.getControl(name="title").value = "test-page"
   >>> browser.getControl("Save").click()
   >>> browser.getLink("Add tiles").click()
   >>> browser.url
   'http://nohost/plone/test-page/@@tx-tiles-settings'

   >>> page_url = self.portal['test-page'].absolute_url()
    
Now a collection...

   >>> browser.open(self.portal.absolute_url())
   >>> browser.getLink(id="collection").click()
   >>> browser.getControl(name="title").value = "test-collection"
   >>> browser.getControl("Save").click()
   >>> browser.getLink("Add tiles").click()
   >>> browser.url
   'http://nohost/plone/test-collection/@@tx-tiles-settings'
    
A Folder

   >>> browser.open(self.portal.absolute_url())
   >>> browser.getLink(id="folder").click()
   >>> browser.getControl(name="title").value = "test-folder"
   >>> browser.getControl('Save').click()
   >>> browser.getLink("Add tiles").click()
   >>> browser.url
   'http://nohost/plone/test-folder/@@tx-tiles-settings'
    
A News Item

   >>> browser.open(self.portal.absolute_url())
   >>> browser.getLink(id="news-item").click()
   >>> browser.getControl(name="title").value = "test-news-item"
   >>> browser.getControl('Save').click()
   >>> browser.getLink("Add tiles").click()
   >>> browser.url
   'http://nohost/plone/test-news-item/@@tx-tiles-settings'
    
Let's get into the meat of this now.  From now on, we'll just play with the test page we created.

   >>> browser.getLink(text='test-page').click()

Make sure the Tiles settings link is there and the remove tiles link is there.

   >>> 'href="' + page_url + '/@@tx-tiles-disable"' in browser.contents 
   True
   >>> 'href="' + page_url + '/@@tx-tiles-settings"' in browser.contents 
   True
    
Go to the tiles settings, saving should stay on the form

   >>> browser.getLink(text="Tiles").click()
   >>> browser.getControl(name="form.tilesposition").value = ["below_content"]
   >>> browser.getControl(name="form.actions.apply").click()
   >>> browser.url
   'http://nohost/plone/test-page/@@tx-tiles-settings'
    
Tiles should not be in the page contents yet because there are no tiles yet.

   >>> browser.open(self.portal['test-page'].absolute_url())
   >>> '<ul class="tx-tiles-container ' in browser.contents
   False
    
add one tile so it'll actually show.

   >>> settings = PageTilesSettings(self.portal['test-page'])
   >>> settings.tiles = [{'link_reference': None, 'image': None, 'image_type': None, 'html': 'a tile text', 'url': None, 'configuration': '', 'heading': '', 'uuid': 'uuidabcdefg'}]
   >>> transaction.commit()
    
Tiles should now show.

   >>> browser.open(self.portal['test-page'].absolute_url())
   >>> '<ul class="tx-tiles-container ' in browser.contents
   True
    
Edit it again and hide it this time.

   >>> browser.getLink(text="Tiles").click()
   >>> browser.getControl(name="form.show").value = ""
   >>> browser.getControl(name="form.actions.apply").click()

It is hidden now.

   >>> browser.open(self.portal['test-page'].absolute_url())
   >>> '<ul class="tx-tiles-container ' in browser.contents
   False
    
Show it again now

   >>> browser.getLink(text="Tiles").click()
   >>> browser.getControl(name="form.show").value = "on"
   >>> browser.getControl(name="form.actions.apply").click()
    
Add some tiles now shall we? Well, can't do it with the browser testing here because the kupu widget we use doesn't have support without ajax.  So we'll just do some programming for it...

   >>> browser.getLink(text="Tiles").click()
   >>> "add new tile" in browser.contents
   True

   >>> settings = PageTilesSettings(self.portal['test-page'])
    
Set the tiles...
   >>> settings.tiles = [{'link_reference': None, 'image': None, 'image_type': None, 'html': 'first tile text', 'url': None, 'configuration': '', 'heading': '', 'uuid': 'uuid111111'}, {'link_reference': None, 'image': None, 'image_type': None, 'html': 'second tile text', 'url': None, 'configuration': '', 'heading': '', 'uuid': 'uuid222222'}, {'link_reference': None, 'image': None, 'image_type': None, 'html': 'third tile text', 'url': None, 'configuration': '', 'heading': '', 'uuid': 'uuid333333'}]
   >>> transaction.commit()

Render the page again and make sure the tiles are there.
   >>> browser.open(self.portal['test-page'].absolute_url())
   >>> 'first tile text' in browser.contents
   True
   >>> 'second tile text' in browser.contents
   True
   >>> 'third tile text' in browser.contents
   True
    
Go to the settings page and check a few things about our expected tiles.

   >>> browser.getLink(text='Tiles').click()

Check if the structures are present for each of the tiles.

   >>> browser.contents.count('div id="tx-tiles-widget"')
   1
   >>> browser.contents.count('div class="tx-tile"')
   3
   >>> browser.contents.count('div class="tx-tile-text"')
   6

Make sure all the tile manipulation links are there...

   >>> 'href="' + page_url + '/@@tx-tiles-edit?index=uuid111111"' in browser.contents
   True
   >>> 'href="' + page_url + '/@@tx-tiles-edit?index=uuid222222"' in browser.contents
   True
   >>> 'href="' + page_url + '/@@tx-tiles-edit?index=uuid333333"' in browser.contents
   True
   >>> 'href="' + page_url + '/@@tx-tiles/uuid111111/@@remove-tile"' in browser.contents
   True
   >>> 'href="' + page_url + '/@@tx-tiles/uuid222222/@@remove-tile"' in browser.contents
   True
   >>> 'href="' + page_url + '/@@tx-tiles/uuid333333/@@remove-tile"' in browser.contents
   True

Now remove the last tile which was the first...

   >>> browser.getLink(url=page_url + '/@@tx-tiles/uuid333333/@@remove-tile').click()
   >>> settings = PageTilesSettings(self.portal['test-page'])
   >>> "uuid333333" in browser.contents
   False
   >>> len(settings.tiles)
   2
    
Should only show 2 tiles now

   >>> browser.open(self.portal['test-page'].absolute_url())
   >>> 'first tile text' in browser.contents
   True
   >>> 'second tile text' in browser.contents
   True
   >>> 'third tile text' in browser.contents
   False

Remove the tiles.

   >>> browser.open(page_url)
   >>> browser.getLink(text="Remove tiles").click()
   >>> "Add tiles" in browser.contents
   True
   >>> '<ul class="tx-tiles-container ' in browser.contents
   False
   
   
   
